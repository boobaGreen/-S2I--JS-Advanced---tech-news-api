// Animation title SECTION

// Love dynamically typed text? You're gonna love this
// Edit these strings to see them typed on the screen:
$strings1: ("Hacker-News", "Hacker-News");

// now for some timing (in seconds)
$durCharFwd: 0.08; // character typed 0.1 dafault
$durFullGap: 8; // time between typed/delete
$durCharBwd: 0.05; // character deleted 0.08 default
$durDoneGap: 1; // time between strings

// initializing some variables and functions ✊🏼
$charCount: 0;
$durTotal: 0;
@each $string1 in $strings1 {
  $charCount: $charCount + str-length($string1);
  $durTotal: $durTotal +
    (str-length($string1) * ($durCharFwd + $durCharBwd)) +
    $durFullGap +
    $durDoneGap;
}
@function percent1($string1, $letter, $modifier) {
  $stringsPast: $string1 - 1;
  $time: 0;
  @while $stringsPast > 0 {
    $time: $time +
      (
        ($durCharFwd + $durCharBwd) * (str-length(nth($strings1, $stringsPast)))
      ) +
      $durFullGap +
      $durDoneGap;
    $stringsPast: $stringsPast - 1;
  }
  @if $letter <= str-length(nth($strings1, $string1)) {
    $time: $time + ($durCharFwd * ($letter - 1));
  } @else {
    $time: $time +
      ($durCharFwd * str-length(nth($strings1, $string1))) +
      $durFullGap +
      ($durCharBwd * ($letter - str-length(nth($strings1, $string1))));
  }
  @return (calc($time / $durTotal) * 100 + $modifier) + "%";
}
$currentPercentage: 0;
// now THIS is where the magic happens... ✨
@keyframes typed1 {
  @for $i from 1 through length($strings1) {
    // @for $j from 1 through (str-length(nth($strings, $i)) * 2 - 1) {
    @for $j from 1 through (str-length(nth($strings1, $i)) * 2) {
      /* string #{$i}, char #{$j} */
      @if $j < str-length(nth($strings1, $i)) * 2 {
        // not last character deleted
        #{percent1($i, $j, 0)},
        #{percent1($i, $j+1, -0.001)} {
          @if $j <= str-length(nth($strings1, $i)) {
            content: quote(#{str_slice(nth($strings1, $i), 1, $j)});
          } @else {
            content: quote(
              #{str_slice(
                  nth($strings1, $i),
                  1,
                  str-length(nth($strings1, $i)) -
                    ($j - str-length(nth($strings1, $i)))
                )}
            );
          }
        }
      } @else {
        @if $i < length($strings1) {
          // not last string
          #{percent1($i, $j, 0)},
          #{percent1($i+1, 1, -0.001)} {
            content: "​"; // zero-width space to retain element height
          }
        } @else {
          // last string
          #{percent1($i, $j, 0)},
          100% {
            content: "​"; // zero-width space to retain element height
          }
        }
      }
    }
  }
}
@keyframes beam-blink {
  75% {
    border-color: transparent;
  }
}
* {
  backface-visibility: hidden;
}

.header {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: calc(25px + 2vw);

  font-family: $font-family-1;
  color: $color-primary; //
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  &::after {
    content: "​"; // zero-width space to retain element height
    position: relative;
    top: -13px; // IMPORTANT WHERE PUT TITLE
    @media (max-width: 575px) {
      top: -33px; // IMPORTANT WHERE PUT TITLE max-width: 575px
    }
    display: inline-block;
    padding-right: 3px;
    padding-right: calc(5px + 1vw);
    border-right: 10px solid rgba($color-primary, 0.75);
    border-right: calc(1.1vw + 4px) solid rgba($color-primary, 0.75);
    text-shadow: 0 0 5px $color-primary;
    white-space: nowrap;
    animation: typed1 #{$durTotal + "s"} linear 1s infinite,
      beam-blink 1s infinite;
  }
}
